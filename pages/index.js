import Head from 'next/head'
import Image from 'next/image'
import styles from '../styles/Home.module.css'
import CoinGecko from 'coingecko-api';
const coinGeckoClient = new CoinGecko();
let zrx = process.env.API;

export default function Home(props) {
  const formatPercent = number =>
    `${new Number(number).toFixed(2)}%`
  

  const formatDollar = (number, maxSignificantDigits) =>
    new Intl.NumberFormat(
      'en-US',
      {
        style:'currency',
        currency:'usd',
        maxSignificantDigits
      }
    ).format(number);
  

  const {data } = props.result;
  return (
    <div className={styles.container}>
      <Head>
        <title>CoinMarketCap Clone</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <h1>Coins</h1>
      <table className="table">
        <thead>
          <tr>
          <th>Symbol</th>
          <th>24H Change</th>
          <th>Price</th>
          <th>Market Cap</th>
          </tr>
          </thead>
          <tbody>
            {data.map(coin => (
              <tr key={coin.id}>
                <td>
                  <img
                  src = {coin.image}
                  style={{width: 25, height: 25, marginRight: 10}}
                  />
                  {coin.symbol.toUpperCase()}</td> 
                 <td>
                   <span 
                   className = {coin.price_change_percentage_24h > 0 ? ('test-success'):
                  'text-danger'
                  }>

                   {formatPercent(coin.price_change_percentage_24h)}
                  </span>
                   </td>
                <td>{formatDollar(coin.current_price,20)}</td>
                <td>{formatDollar(coin.market_cap,12)}</td>
              </tr>
            ))}
          </tbody>
      </table>
    </div>
  )
}

export async function getServerSideProps() {
  const params = {
    order: CoinGecko.ORDER.MARKET_CAP_DESC
  }
  let zrx = '0xe41d2489571d322189246dafa5ebde1f4699f498';
  let data = await coinGeckoClient.coins.fetchCoinContractMarketChartRange(zrx, 'ethereum', {
    from: 1392577232,
    to: 1422577232,
  });
  const result = await coinGeckoClient.coins.markets({params})
  return{
    props: {
      result
    }
  };

}